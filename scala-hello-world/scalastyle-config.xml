<!--
  ~ Based in the spark scala style at:
  ~ https://github.com/apache/spark/blob/master/scalastyle-config.xml
  ~ Documentation in each checker supported at:
  ~ http://www.scalastyle.org/rules-dev.html
  -->
<!--

If you wish to turn off checking for a section of code, you can put a comment in the source
before and after the section, with the following syntax:
  // scalastyle:off
  ...  // stuff that breaks the styles
  // scalastyle:on
You can also disable only one rule, by specifying its rule id, as specified in:
  http://www.scalastyle.org/rules-0.7.0.html
  // scalastyle:off no.finalize
  override def finalize(): Unit = ...
  // scalastyle:on no.finalize
  -->
<scalastyle>
  <name>Scalastyle standard configuration</name>
  <check level="warning" class="org.scalastyle.file.FileTabChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.file.FileLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxFileLength"><![CDATA[800]]></parameter>
    </parameters>
  </check>
  <check level="warning" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxLineLength"><![CDATA[120]]></parameter>
      <parameter name="tabSize"><![CDATA[2]]></parameter>
    </parameters>
  </check>

  <!-- ================================================================================ -->
  <!--                                     currently                                    -->
  <!-- ================================================================================ -->
  <check level="warning" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"/>
  <check level="warning" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="false"/>
  <check level="warning" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
    <parameters>
      <parameter name="maxParameters"><![CDATA[10]]></parameter>
    </parameters>
  </check>

  <!-- ================================================================================ -->
  <!--                                     scala style                                  -->
  <!-- ================================================================================ -->

  <!-- Ideally the following two rules should be configurable to rule out string interpolation. -->
  <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.NullChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"/>
  <check level="warning" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
    <parameters>
      <parameter name="maximum"><![CDATA[10]]></parameter>
    </parameters>
  </check>
  <check level="warning" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
    <parameters>
      <parameter name="maxTypes"><![CDATA[30]]></parameter>
    </parameters>
  </check>
  <check level="warning" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
    <parameters>
      <parameter name="maxMethods"><![CDATA[30]]></parameter>
    </parameters>
  </check>
  <check level="warning" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxLength"><![CDATA[20]]></parameter>
      <parameter name="ignoreComments"><![CDATA[true]]></parameter>
      <parameter name="ignoreEmpty"><![CDATA[true]]></parameter>
    </parameters>
  </check>

  <!-- ================================================================================ -->
  <!--                                    import rules                                  -->
  <!-- ================================================================================ -->
  <check level="warning" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
    <parameters>
      <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
    </parameters>
  </check>

  <!-- Imports grouped and ordered -->
  <check enabled="true" class="org.scalastyle.scalariform.ImportOrderChecker" level="warning">
    <parameters>
      <parameter name="groups">java,scala,3rdParty,origami</parameter>
      <parameter name="group.java">javax?\..*</parameter>
      <parameter name="group.scala">scala\..*</parameter>
      <parameter name="group.3rdParty">(?!com\.origami\.).*</parameter>
      <parameter name="group.origami">com\.origami\..*</parameter>
    </parameters>
  </check>

  <!-- ================================================================================ -->
  <!--                                  control structures                              -->
  <!-- ================================================================================ -->
  <check enabled="true" class="org.scalastyle.scalariform.LowercasePatternMatchChecker" level="warning"/>
  <check level="warning" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
    <parameters>
      <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
      <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>
    </parameters>
  </check>

  <!-- ================================================================================ -->
  <!--                                  naming conventions                              -->
  <!-- ================================================================================ -->
  <check level="warning" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
    </parameters>
  </check>
  <check level="warning" class="org.scalastyle.scalariform.FieldNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
      <parameter name="objectFieldRegex"><![CDATA[^[A-Z][A-Za-z]*$]]></parameter>
    </parameters>
  </check>
  <check level="warning" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
    </parameters>
  </check>
  <check level="warning" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
    </parameters>
  </check>
  <check level="warning" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
    </parameters>
  </check>

  <!-- ================================================================================ -->
  <!--                              clean and readable code                             -->
  <!-- ================================================================================ -->
  <check enabled="true" class="org.scalastyle.scalariform.RedundantIfChecker" level="warning"/>
  <check enabled="true" class="org.scalastyle.scalariform.EmptyClassChecker" level="warning"/>
  <check enabled="true" class="org.scalastyle.scalariform.NotImplementedErrorUsage" level="warning"/>
  <check enabled="true" class="org.scalastyle.scalariform.ProcedureDeclarationChecker" level="warning"/>
  <check enabled="true" class="org.scalastyle.scalariform.ForBraceChecker" level="warning"/>
  <check level="warning" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[println]]></parameter>
    </parameters>
    <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with
      // scalastyle:off println
      println(...)
      // scalastyle:on println]]></customMessage>
  </check>
  <check enabled="true" class="org.scalastyle.scalariform.ClassTypeParameterChecker" level="warning">
    <parameters>
      <parameter name="regex"><![CDATA[^[A-Z_]$]]></parameter>
    </parameters>
  </check>

  <!-- ================================================================================ -->
  <!--                              functional programming                              -->
  <!-- ================================================================================ -->
  <check class="org.scalastyle.scalariform.WhileChecker" level="warning" enabled="true"/>
</scalastyle>
